# This is a basic workflow to help you get started with Actions

name: Continuous Deployment

# Controls when the workflow will run
on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get build details
        id: details
        run: |
          HELX_PROJECT_NAME=${{ secrets.HELX_PROJECT_NAME }}
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          HELX_ENVIRONMENT=$(echo ${BRANCH_NAME/\//-} | cut -d/ -f1)
          if [ "$HELX_ENVIRONMENT" = "main" ]; then
            echo ::set-output name=envvarPrefix::__PROD__
            HELX_ENVIRONMENT=prod
          elif [ "$HELX_ENVIRONMENT" = "develop" ]; then
            echo ::set-output name=envvarPrefix::__STAGE__
            HELX_ENVIRONMENT=stage
          else
            echo ::set-output name=envvarPrefix::__DEV__
          fi

          echo ::set-output name=project::$HELX_PROJECT_NAME
          echo ::set-output name=branch::$BRANCH_NAME
          echo ::set-output name=environment::$HELX_ENVIRONMENT

          if [ "$BRANCH_NAME" = "main" ]; then
            echo ::set-output name=environmentPrefix::
          else
            echo ::set-output name=environmentPrefix::$HELX_ENVIRONMENT.
          fi

      - name: Review Details
        run: |
          echo Project: ${{ steps.details.outputs.project }}
          echo Branch: ${{ steps.details.outputs.branch }}
          echo Environment: ${{ steps.details.outputs.environment }}
          echo API Environment Prefix: ${{ steps.details.outputs.environmentPrefix }}
          echo Environment Secret Matching Prefix: ${{ steps.details.outputs.envvarPrefix }}

      - uses: actions/checkout@v2
        name: Login to GitHub Container Registry

      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-buildx-action@v1

      - name: Write environemnt variables
        run: |
          for variable in ${!REACT_@}; do
            echo $variable=${!variable} >> .env
          done

          for variable in ${!${{ steps.details.outputs.envvarPrefix }}REACT_@}; do
            echo ${variable/#${{ steps.details.outputs.envvarPrefix }}/}=${!variable} >> .env
          done

          echo "Finished writing variables"
          cat .env
        env:
          REACT_APP_API_URL: https://${{ steps.details.outputs.environmentPrefix }}api.${{ steps.details.outputs.project }}.projects.helx.dev
          __DEV__REACT_APP_SUSCRIBETE_URL: ${{ secrets.__DEV__REACT_APP_SUSCRIBETE_URL }}
          __STAGE__REACT_APP_SUSCRIBETE_URL: ${{ secrets.__STAGE__REACT_APP_SUSCRIBETE_URL }}
          __PROD__REACT_APP_SUSCRIBETE_URL: ${{ secrets.__PROD__REACT_APP_SUSCRIBETE_URL }}

      - uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile.prod
          push: true
          tags: ghcr.io/helxdev/conforpra-srl-frontend:${{ github.sha }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_K8S_CLUSTER }}

      - name: Install kubectl
        run: |
          curl -L https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/linux/amd64/kubectl -o /tmp/kubectl
          chmod +x /tmp/kubectl
          export PATH=/tmp/kubectl:$PATH
      - name: Update config file
        run: |
          HELX_PROJECT_NAME=${{ steps.details.outputs.project }}
          BRANCH_NAME=${{ steps.details.outputs.branch }}
          HELX_ENVIRONMENT=${{ steps.details.outputs.environment }}

          sed -i "s/\${GITHUB_SHA}/$GITHUB_SHA/" k8s/web.yaml
          sed -i "s/\${HELX_PROJECT_NAME}/$HELX_PROJECT_NAME/" k8s/web.yaml

          # if pushing to main deploy to production
          if [ "$BRANCH_NAME" = "main" ]; then
            sed -i 's/${HELX_ENVIRONMENT}//' k8s/web.yaml
          else
            # otherwhise deploy to branch-specific environment
            sed -i "s/\${HELX_ENVIRONMENT}/$HELX_ENVIRONMENT./" k8s/web.yaml
          fi

          kubectl apply -f k8s -n "${HELX_PROJECT_NAME}--${HELX_ENVIRONMENT}"
